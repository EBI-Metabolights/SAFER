% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sfe2.R
\name{sfe2}
\alias{sfe2}
\title{#' Spec-feature extraction v2}
\usage{
sfe2(feature, f.ind, xmat, ppm, r.thresh = 0.8)
}
\arguments{
\item{feature}{feature object (all feature)}

\item{f.ind}{feature index to do sfe on}

\item{xmat}{spectral matrix}

\item{ppm}{ppm vector}

\item{r.thresh}{correlation threshold}
}
\value{
feat = aligned$feat,
lags for the aligned subset spectra
fits (fit feature profile to each spectrum)
rmses for fits
rvals for each subset spectrum (in case you want to redo filtering)
}
\description{
Using feature shape from filtered fse results, attempt to align the feature to each 
 spectrum in the dataset (within the spectral region from which the feature was 
 initially extracted). Accept the adjustment if correlation to the initial feature 
 improves and passes the provided r value threshold. Then recalculate the feature
 profile using STOCSY of the original driver. Calculate the least squares fit of
 the feature to each spectrum which passed the correlation threshold. 
 
 Think of this as: try alignment of spectral region to extracted feature shape. 
 If improved, accept, on a spectrum-by-spectrum basis. Then follow up with a 
 final round of STORM. 
 
 Used after filtering features, as it can take a while.
}
\details{
- no need to test range contradictions
- just do fft-based alignment to current profile for ALL spectra
- allow lags of +/- (feature width-1) 
- * use batman_local_opt to do the fitting and position opt
- updated subset (ss) inds, best lag for each ss spec, and updated feature object returned.
- in feat, profile and ss will be updated. MUST calculate feature positions for
  each ss spectrum after this: 
  
  feat <- list(profile = profile,
               position = f.pos,
               ss = ss,
               driver.relative = driver)
               
  al.fts <- apply_lags_feat(feat = feat,
                            xmat = xmat, 
                            lags = lags$lag.in.f2)
}
\author{
MTJ
}
