% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/is_nullish.R
\name{is_nullish}
\alias{is_nullish}
\title{is_nullish: contaminated with NaN, NULL, Inf, or empty values?}
\usage{
is_nullish(x)
}
\value{
whether the object has NaN, NULL, empty, or Inf values
}
\description{
Check sure if elements are actually usable values (i.e.
not: empty, NaN, Inf, or NULL). For vectors and matrices, this 
behaves like a composite is.na() like function.
}
\details{
Works on basic types: numeric, integer, complex, character, logical
And data structures: vector, matrix, list, data.frame, table, nested list,
factor

If x is a list, this will recursively check each element and 
return TRUE for each one if all elements are usable values. Top level
is preserved. *If error message from lapply, returns TRUE.

Examples:
   is_nullish(c())
   
   obj <- c(1.2i,4, NaN)
   is_nullish(obj)
   
   obj <- c(1.2,4, NaN)
   is_nullish(obj) 
   
   obj <- c(2,4, NAN)
   is_nullish(obj)
   
   obj <- c(T,F,T)
   is_nullish(obj)
   
   obj <- list(a = 1, b = NULL, c = NA, d = list(a =  NULL, b = 1))
   is_nullish(obj)
   
   tab <- matrix(c(7, 5, 14, NA, 3, 2, NaN, 6, Inf), ncol=3, byrow=TRUE)
   colnames(tab) <- c('colName1','colName2','colName3')
   rownames(tab) <- c('rowName1','rowName2','rowName3')
   is_nullish(tab)
   is_nullish(as.table(tab))
   
   obj <- data.frame(filed1 = NaN,
                     f2 = 2)
   is_nullish(obj)
   
   obj <- factor(c("yes", "no", "no", "yes", "yes"))
   is_nullish(obj)

#' @param x an object of (any?) type
}
