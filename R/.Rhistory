in.study <- sampleTable.key$Study %in% study
# Extract all filetypes ####
# tbl_ss <- sampleTable.key[in.study, ]
available.formats <- sampleTable.key$Extension[in.study] %>% unique
available.formats <- (available.formats %in% pref.key) %>% available.formats[.]
if (length(available.formats) == 0){
message("Study ", study, " does not contain spectra in one of the supported formats (nmrML > dx > 1r). Skipping")
return(NULL)
}
# Make a temporary spot in the tmp directory (run) for the unzipped files
data.loc <- paste0(tmpdir,"/run/processed_data")
dir.create(data.loc, showWarnings = F)
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
specpaths
X <- readnmrML(specpaths)
source("~/Documents/GitHub/MARIANA-NMR/R/readnmrML.R")
X <- readnmrML(specpaths)
View(spectrumList)
study <- "MTBLS639"
# study <- "MTBLS639"
# study <- "MTBLS1"
# Select study rows
in.study <- sampleTable.key$Study %in% study
# Extract all filetypes ####
# tbl_ss <- sampleTable.key[in.study, ]
available.formats <- sampleTable.key$Extension[in.study] %>% unique
available.formats <- (available.formats %in% pref.key) %>% available.formats[.]
if (length(available.formats) == 0){
message("Study ", study, " does not contain spectra in one of the supported formats (nmrML > dx > 1r). Skipping")
return(NULL)
}
# Make a temporary spot in the tmp directory (run) for the unzipped files
data.loc <- paste0(tmpdir,"/run/processed_data")
dir.create(data.loc, showWarnings = F)
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
specpaths
X <- readnmrML(specpaths)
tree <- xmlTreeParse(filenames[1])
root <- xmlRoot(tree)
View(root)
acquisition <- xmlElementsByTagName(root, "acquisition", recursive = TRUE)[[1]]
View(root)
View(acquisition)
SFO1 <- as.double(xmlAttrs(xmlElementsByTagName(acquisition, "irradiationFrequency", recursive = TRUE)[[1]])["value"])
SWH <- as.double(xmlAttrs(xmlElementsByTagName(acquisition, "sweepWidth", recursive = TRUE)[[1]])["value"])
SW <- SWH/SFO1
spectrumList <- xmlElementsByTagName(root, "spectrum1D", recursive = TRUE)
View(root)
filenames
spectrumList <- xmlElementsByTagName(root, "spectrum1D", recursive = TRUE)
length(spectrumList)==0
source("~/Documents/GitHub/MARIANA-NMR/R/readnmrML.R")
source("~/Documents/GitHub/MARIANA-NMR/R/readnmrML.R")
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
source("~/Documents/GitHub/MARIANA-NMR/R/spectra.2.RDS.R")
source("~/Documents/GitHub/MARIANA-NMR/R/spectra.2.RDS.R")
source("~/Documents/GitHub/MARIANA-NMR/R/spectra.2.RDS.R")
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
source("~/Documents/GitHub/MARIANA-NMR/R/spectra.2.RDS.R")
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
source("~/Documents/GitHub/MARIANA-NMR/R/spectra.2.RDS.R")
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
source("~/Documents/GitHub/MARIANA-NMR/R/spectra.2.RDS.R")
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
mat.files <- lapply(studies[1:length(studies)], function(study){
# study <- "MTBLS639"
# study <- "MTBLS1"
# Select study rows
in.study <- sampleTable.key$Study %in% study
# Extract all filetypes ####
# tbl_ss <- sampleTable.key[in.study, ]
available.formats <- sampleTable.key$Extension[in.study] %>% unique
available.formats <- (available.formats %in% pref.key) %>% available.formats[.]
if (length(available.formats) == 0){
message("Study ", study, " does not contain spectra in one of the supported formats (nmrML > dx > 1r). Skipping")
return(NULL)
}
# Sort formats by preference
# available.formats <- lapply(available.formats, function(type) which(pref.key %in% type)) %>% unlist %>% order %>% available.formats[.]
# Make a temporary spot in the tmp directory (run) for the unzipped files
data.loc <- paste0(tmpdir,"/run/processed_data")
dir.create(data.loc, showWarnings = F)
# For each file type in this study
for (file.format in available.formats){
# file.format <-  available.formats[1]
# Get data type and string ####
if (file.format %in% "nmrML"){
format.string <- "nmrML"
}
if (file.format %in% c("dx",".dx")){
format.string <- "dx"
}
if (file.format %in% c("pdata/1/1r")){
format.string <- "1r"
}
print(paste0("-----    ", study, " - ", format.string, " files    -----"))
# Subset table for those files ####
is.filetype <- sampleTable.key$Extension %in% file.format
wanted.files <- (in.study & is.filetype) %>%
sampleTable.key[.,]
wanted.files$extracted.file <- NA
# Extract and convert those files ####
mat.file <- spectra.2.RDS(study, wanted.files, zip.file, data.loc, format.string)
}
# Clean up the processed data dir (don't keep those files around)
message("Cleaning up processed data files...")
unlink(data.loc, recursive = T)
return(mat.file)
})
pref.key
paste(pref.key, collapse = " ")
paste(pref.key, collapse = " > ")
params_loc = '/Users/mjudge/Documents/mtbls430/430.params.yaml'
# load supplied params
run_params <- yaml::yaml.load_file(params_loc, eval.expr = TRUE)
# if (run_params$galaxy$enabled == FALSE) {
#   setup(run_params)
# }
pars <- run_params
dir.exists(pars$dirs$temp)
pars$dirs$temp
!is.null(pars$dirs$temp)
pars$dirs$temp <- './'
!is.null(pars$dirs$temp)
dir.exists(pars$dirs$temp)
!dir.exists(pars$dirs$temp))
dir.create(pars$dirs$temp)
dir.create(pars$dirs$temp, showWarnings = F)
paste0(pars$dirs$temp, "/session.info.RDS")
pars$dirs$temp <- NULL
paste0(pars$dirs$temp, "/session.info.RDS")
pars$dirs$temp <- '.'
dir.exists(pars$dirs$temp)
dir.create(pars$dirs$temp, showWarnings = F)
paste0(pars$dirs$temp, "/session.info.RDS")
# matches <- readRDS(paste0(this.run, "/matches_scored_named.RDS"))
# write.table(matches, sep = '\t', file = 'matches_scored_named.txt', row.names = F, col.names = T)
saveRDS(sessionInfo(), paste0(pars$dirs$temp, "/session.info.RDS"))
devtools::document('/Users/mjudge/Documents/GitHub/icl_nmr_R')
# pars <- yaml::yaml.load_file('/Users/mjudge/Documents/mtbls430/430.params.yaml', eval.expr = TRUE)
devtools::document('/Users/mjudge/Documents/GitHub/icl_nmr_R')
devtools::document('/Users/mjudge/Documents/GitHub/icl_nmr_R')
devtools::document('/Users/mjudge/Documents/GitHub/icl_nmr_R')
devtools::document('/Users/mjudge/Documents/GitHub/icl_nmr_R')
pipeline(params_loc = '/Users/mjudge/Documents/mtbls430/430.params.yaml')
usethis::use_pipe()
devtools::document('/Users/mjudge/Documents/GitHub/icl_nmr_R')
pipeline(params_loc = '/Users/mjudge/Documents/mtbls430/430.params.yaml')
devtools::document('/Users/mjudge/Documents/GitHub/icl_nmr_R')
pars <- yaml::yaml.load_file('/Users/mjudge/Documents/mtbls430/430.params.yaml', eval.expr = TRUE)
backfit.results <- readRDS(paste0(this.run, "/backfit.results.RDS"))
tmpdir <- pars$dirs$temp
this.run <- paste0(tmpdir)
backfit.results <- readRDS(paste0(this.run, "/backfit.results.RDS"))
View(backfit.results)
length(backfit.results$backfits %>% unlist(recursive = F))
View(backfit.results)
lapply(backfit.results$backfits, nrow)
lapply(backfit.results$backfits, nrow) %>% unlist %>% sum
View(backfit.results)
show_me_the_evidence(results.dir = '/Users/mjudge/Documents/hpc_run_430_13JUN/MTBLS430 Jun 13')
results.dir <- getwd()
# for the selectizer:
sort.choices <- c("Scores - cluster", "Search for compound...") # "Compound names - cluster", 'Compound names - alphabetical',
message('Evidence Viewer: reading data...')
if (stringr::str_sub(results.dir, start= -1) != "/"){
results.dir <- paste0(results.dir, '/')
}
results.dir
results.dir = '/Users/mjudge/Documents/hpc_run_430_13JUN/MTBLS430 Jun 13'
# for the selectizer:
sort.choices <- c("Scores - cluster", "Search for compound...") # "Compound names - cluster", 'Compound names - alphabetical',
message('Evidence Viewer: reading data...')
# Handle whether or not user adds /
if (stringr::str_sub(results.dir, start= -1) != "/"){
results.dir <- paste0(results.dir, '/')
}
results.dir
pars <- yaml::yaml.load_file(paste0(results.dir,'params.yaml'), eval.expr = TRUE)
pars
study <- pars$study$id
ppm.tolerance = pars$matching$filtering$ppm.tol
cutoff.residuals.feat = .5 # currently unused
cutoff.residuals.spec = .5 # currently unused
hshift = 0
# Read in match data
backfit.results <- readRDS(paste0(results.dir,"backfit.results.RDS"))
backfits <- backfit.results$backfits
match.info <- backfit.results$match.info
# Read in library data
lib.info <- readRDS(paste0(results.dir, "lib.info.RDS"))
lib.data.processed <- readRDS(paste0(results.dir, "lib.data.processed.RDS"))
results.dir
paste0(results.dir, "lib.data.processed.RDS")
lib.data.processed <- readRDS(paste0(results.dir, "lib.data.processed.RDS"))
# Read in library data
lib.info <- readRDS(paste0(results.dir, "lib.info.RDS"))
results.dir = '/Users/mjudge/Documents/hpc_run_430_13JUN/MTBLS430Jun13'
lib.data.processed <- readRDS(paste0(results.dir, "lib.data.processed.RDS"))
if (stringr::str_sub(results.dir, start= -1) != "/"){
results.dir <- paste0(results.dir, '/')
}
lib.data.processed <- readRDS(paste0(results.dir, "lib.data.processed.RDS"))
lib.data.processed <- readRDS('/Users/mjudge/Desktop/lib.data.processed.RDS')
results.dir = '/Users/mjudge/Documents/current_run'
lib.data.processed <- readRDS(paste0(results.dir, "lib.data.processed.RDS"))
if (stringr::str_sub(results.dir, start= -1) != "/"){
results.dir <- paste0(results.dir, '/')
}
lib.data.processed <- readRDS(paste0(results.dir, "lib.data.processed.RDS"))
results.dir = '/Users/mjudge/Documents/hpc_run_430_13JUN/MTBLS430Jun13'
# ppm isn't needed anymore; using spectral matrix ppm.
lib.data.processed <- lib.data.processed %>% lapply(function(x) {x$data <- NULL; x$ppm <- NULL; return(x)})
# add compound names as column in match.info
match.info$ref.name <- lib.info$ref.list$Compound.Name[match.info$ref]
# Read in spectral matrix data
fse.result <- readRDS(paste0(results.dir, "fse.result.RDS"))
if (stringr::str_sub(results.dir, start= -1) != "/"){
results.dir <- paste0(results.dir, '/')
}
# Read in spectral matrix data
fse.result <- readRDS(paste0(results.dir, "fse.result.RDS"))
xmat <- fse.result$xmat
ppm <- fse.result$ppm
rm(fse.result)
# Read in scores matrix
scores.matrix <- readRDS(paste0(results.dir,"ss.ref.sumScores.RDS")) %>% t
colnames(scores.matrix) <- 1:ncol(scores.matrix)
rfs.used <- readRDS(paste0(results.dir,"rfs.used.RDS"))
keeprefs <-  apply(scores.matrix, 1, max) > 0
refs.used <- which(keeprefs)
scores.matrix <- scores.matrix[keeprefs %>% as.logical,,drop=F]
lib.info <- lib.info$ref.list[keeprefs %>% as.logical,]
lib.data.processed <- lib.data.processed[keeprefs %>% as.logical]
fits.inds <- match.info$ref %in% refs.used
match.info <- match.info[fits.inds, ]
backfits <- backfits[fits.inds]
if (nrow(scores.matrix) > 1){
clust.refs <- T
clust.samples <- T
} else {
clust.refs <- F
clust.samples <- T
}
# hclust: column subsetting doesn't work when names are used. ### #
ref.order <- 1:nrow(scores.matrix)
sample.order <- 1:ncol(scores.matrix)
if (clust.refs){
ref.order <- hclust(dist(scores.matrix))$order
}
if (clust.samples){
sample.order <- hclust(dist(t(scores.matrix)))$order
}
refs <- data.frame(number = seq_along(refs.used), # this is the initial row number (before sort). lib info matches this.
id = refs.used %>% as.numeric, # this is the ref number in the full library (also match.info$ref)
name = lib.info$Compound.Name) # name
seq_along(refs.used)
refs.used %>% as.numeric
length(refs.used %>% as.numeric)
length(refs.used)
length(lib.info$Compound.Name)
# Read in library data
lib.info <- readRDS(paste0(results.dir, "lib.info.RDS"))
lib.info$ref.list %>% nrow
lib.data.processed %>% length()
results.dir = '/Users/mjudge/Documents/hpc_run_430_13JUN/MTBLS430Jun13'
#######################################################################################
if (is.null(results.dir)) {
results.dir <- getwd()
}
# for the selectizer:
sort.choices <- c("Scores - cluster", "Search for compound...") # "Compound names - cluster", 'Compound names - alphabetical',
## Params ###############################################################################
message('Evidence Viewer: reading data...')
# Locate us ####
# Handle whether or not user adds /
if (stringr::str_sub(results.dir, start= -1) != "/"){
results.dir <- paste0(results.dir, '/')
}
pars <- yaml::yaml.load_file(paste0(results.dir,'params.yaml'), eval.expr = TRUE)
study <- pars$study$id
ppm.tolerance = pars$matching$filtering$ppm.tol
cutoff.residuals.feat = .5 # currently unused
cutoff.residuals.spec = .5 # currently unused
hshift = 0
##########################     Setup/Read Data    ####################################
# Read in match data
backfit.results <- readRDS(paste0(results.dir,"backfit.results.RDS"))
backfits <- backfit.results$backfits
match.info <- backfit.results$match.info
# Read in library data
lib.info <- readRDS(paste0(results.dir, "lib.info.RDS"))
lib.data.processed <- readRDS('/Users/mjudge/Documents/hpc_run_430_13JUN/MTBLS430Jun13')
#######################################################################################
if (is.null(results.dir)) {
results.dir <- getwd()
}
# for the selectizer:
sort.choices <- c("Scores - cluster", "Search for compound...") # "Compound names - cluster", 'Compound names - alphabetical',
message('Evidence Viewer: reading data...')
# Handle whether or not user adds /
if (stringr::str_sub(results.dir, start= -1) != "/"){
results.dir <- paste0(results.dir, '/')
}
results.dir
pars <- yaml::yaml.load_file(paste0(results.dir,'params.yaml'), eval.expr = TRUE)
study <- pars$study$id
ppm.tolerance = pars$matching$filtering$ppm.tol
cutoff.residuals.feat = .5 # currently unused
cutoff.residuals.spec = .5 # currently unused
hshift = 0
# Read in match data
backfit.results <- readRDS(paste0(results.dir,"backfit.results.RDS"))
backfits <- backfit.results$backfits
match.info <- backfit.results$match.info
# Read in library data
lib.info <- readRDS(paste0(results.dir, "lib.info.RDS"))
lib.data.processed <- readRDS('/Users/mjudge/Documents/hpc_run_430_13JUN/MTBLS430Jun13/lib.data.processed.RDS')
lib.data.processed <- readRDS('/Users/mjudge/Documents/not_galaxy/lib.data.processed.RDS')
nrow(lib.info$ref.list)
# add compound names as column in match.info
match.info$ref.name <- lib.info$ref.list$Compound.Name[match.info$ref]
# Read in spectral matrix data
fse.result <- readRDS(paste0(results.dir, "fse.result.RDS"))
xmat <- fse.result$xmat
ppm <- fse.result$ppm
rm(fse.result)
# Read in scores matrix
scores.matrix <- readRDS(paste0(results.dir,"ss.ref.sumScores.RDS")) %>% t
colnames(scores.matrix) <- 1:ncol(scores.matrix)
rfs.used <- readRDS(paste0(results.dir,"rfs.used.RDS"))
length(rfs.used)
keeprefs <-  apply(scores.matrix, 1, max) > 0
sum(keeprefs)
refs.used <- which(keeprefs)
length(refs.used)
unique(refs.used)
scores.matrix <- scores.matrix[keeprefs %>% as.logical,,drop=F]
lib.info <- lib.info$ref.list[keeprefs %>% as.logical,]
lib.data.processed <- lib.data.processed[keeprefs %>% as.logical]
fits.inds <- match.info$ref %in% refs.used
match.info <- match.info[fits.inds, ]
backfits <- backfits[fits.inds]
nrow(scores.matrix) > 1
clust.refs <- T
clust.samples <- T
# hclust: column subsetting doesn't work when names are used. ### #
ref.order <- 1:nrow(scores.matrix)
sample.order <- 1:ncol(scores.matrix)
if (clust.refs){
ref.order <- hclust(dist(scores.matrix))$order
}
if (clust.samples){
sample.order <- hclust(dist(t(scores.matrix)))$order
}
View(lib.info)
nrow(scores.matrix)
# Read in scores matrix
scores.matrix <- readRDS(paste0(results.dir,"ss.ref.sumScores.RDS")) %>% t
dim(scores.matrix)
rownames(scores.matrix)
# Read in scores matrix
scores.matrix <- readRDS(paste0(results.dir,"ss.ref.sumScores.RDS")) %>% t
dim(scores.matrix)
results.dir
