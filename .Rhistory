mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
})
})
} else {list(emptyRow())}
})
View(new.data)
new.data %>% unlist(recursive = F)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
})
})
} else {list(list(emptyRow()))}
})
new.data %>% unlist(recursive = F)
View(new.data)
match.info[1,]
mir$feat <- mm
mm <- 1
mir$feat <- mm
mir <- match.info[1,]
mir$feat <- mm
mir
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
})
rfs.new
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
rfs.new
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {list(list(emptyRow()))}
})
new.data
new.data %>% unlist(recursive = F)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {list(emptyRow())}
})
new.data %>% unlist(recursive = F)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {list(list(emptyRow()))}
})
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
rfs.new
View(rfs.new)
rfs.new <- list(list(emptyRow()))
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
View(member.matches)
f + (1:5)
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
View(member.matches)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {
rfs.new <- list(list(emptyRow()))
return(rfs.new)
}
})
View(new.data)
new.data %>% unlist(recursive = F)
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(a)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {
rfs.new <- list(list(emptyRow()))
}
return(rfs.new)
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(new.data)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {
rfs.new <- list((emptyRow()))
return(list(rfs.new))
}
})
View(new.data)
new.data %>% unlist(recursive = F) %>% unlist(recursive = F)
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(a)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
return(member.matches)
} else {
rfs.new <- list((emptyRow()))
return(list(rfs.new))
}
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(a)
View(member.matches)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {
rfs.new <- list((emptyRow()))
member.matches <- list(list(rfs.new))
}
})
View(new.data)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {
rfs.new <- list((emptyRow()))
member.matches <- list(rfs.new)
}
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(a)
match.info[1,]
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
# } else {
#
#   rfs.new <- list((emptyRow()))
#   member.matches <- list(rfs.new)
#
# }
})
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
# } else {
#
#   rfs.new <- list((emptyRow()))
#   member.matches <- list(rfs.new)
#
}
})
View(new.data)
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- emptyRow()
rfn$feat <- nm+50
return(rfn)
})
})
} else {
rfs.new <- emptyRow()
member.matches <- list(rfs.new)
}
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(new.data)
a <- new.data %>% unlist(recursive = F) %>% rbindlist
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
} else {
rfs.new <- emptyRow()
member.matches <- list(rfs.new)
}
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
} else {
rfs.new <- list(emptyRow())
member.matches <- list(rfs.new)
}
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
} else {
rfs.new <- list(emptyRow())
member.matches <- list(rfs.new)
}
member.matches
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
} else {
rfs.new <- emptyRow()
member.matches <- list(rfs.new)
}
member.matches
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- f
mir$ref <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
member.matches
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- f
mir$ref <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
View(member.matches)
emptyRow()
colnames(mir)
match.info[1,]
# Set up default empty row:
emptyRow <- function(){
data.frame(
feat = NA,
ref = NA,
lag = NA,
rval = NA,
pval = NA,
pts.matched = NA,
pts.feat = NA,
feat.start = NA,
feat.end = NA,
ref.start = NA,
ref.end = NA,
fit.intercept = NA,
fit.scale = NA,
wasserstein.score = NA,
sum.residuals = NA,
rmse = NA,
rmse.weighted = NA
numpeaks.feat = NA,
emptyRow <- function(){
data.frame(
feat = NA,
ref = NA,
lag = NA,
rval = NA,
pval = NA,
pts.matched = NA,
pts.feat = NA,
feat.start = NA,
feat.end = NA,
ref.start = NA,
ref.end = NA,
fit.intercept = NA,
fit.scale = NA,
wasserstein.score = NA,
sum.residuals = NA,
rmse = NA,
rmse.weighted = NA
numpeaks.feat = NA,
# Set up default empty row:
emptyRow <- function(){
data.frame(
feat = NA,
ref = NA,
lag = NA,
rval = NA,
pval = NA,
pts.matched = NA,
pts.feat = NA,
feat.start = NA,
feat.end = NA,
ref.start = NA,
ref.end = NA,
fit.intercept = NA,
fit.scale = NA,
wasserstein.score = NA,
sum.residuals = NA,
rmse = NA,
rmse.weighted = NA,
numpeaks.feat = NA,
numpeaks.ref = NA,
numpeaks.feat.nnf = NA,
refpeaks.matched = NA
)
}
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- f
mir$ref <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
} else {
rfs.new <- emptyRow()
member.matches <- list(rfs.new)
}
member.matches
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
new.data <- lapply(1:10, function(f){
if (f < 3){
member.matches <- lapply(f + (1:5), function(mm){
mir <- match.info[1,]
mir$feat <- f
mir$ref <- mm
rfs.new <- lapply(1:10, function(nm){
rfn <- mir
return(rfn)
})
})
} else {
rfs.new <- list(emptyRow())
member.matches <- list(rfs.new)
}
member.matches
})
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(a)
new.data <- mclapply(1:2, function(fstack.row) {
if (fstack.row < 2){
member.matches <- lapply(1:10, function(cluster.member){
rfs.new <- lapply(1:3, function(nm.row){
rf <- match.info[1,]
rf$ref <- nm.row
return(rf)
})
return(rfs.new)
# this gives a list where each element holds an individual df row
})
return(member.matches)
} else {
return(list(list(emptyRow())))
}
}, mc.cores = 2)
View(new.data)
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
View(a)
a <- new.data %>% unlist(recursive = F) %>% unlist(recursive = F) %>% rbindlist
rm(new.data)
# Rbind the new matches to the end of match.info
match.info <- rbind(match.info, a)
row.names(match.info) <- NULL
added.feats <- match.info$rmse.weighted %>% is.na %>% match.info$feat[.] %>% unique %>% length
message('\n\t', n.matches.before, ' matches were propagated to ', nrow(match.info), ' matches:')
print(Sys.time()-t1)
message('\n\tfeatures before: ', length(matched.feats))
message('\n\tfeatures added : ', added.feats)
message('\n\tfeatures after : ', length(unique(match.info$feat)))
match.info <- match.info[!is.na(match.info$feat),]
